/*
 * This is an example of using JavaScript with NodeJS to buy a contract via the Deriv/Binary API.
 * This is a simple example where we do not check first if the user has the 
 * symbol available to buy. To check this you would use the active_symbols call.
 * To run this example using NodeJS
 * - Ensure you have NodeJs installed (https://nodejs.org/).
 * - Save this script to a directory on your computer as `buy_contract.js`.
 * - Run `npm install ws` to install the websocket library.
 * - Edit the example and change the app_id and the API token. 
 * - Then run `node buy_contract.js`.
 * 
 */
const WebSocket = require('ws');
const DerivAPIBasic = require('@deriv/deriv-api/dist/DerivAPIBasic');

// To generate your app_id, go to https://api.deriv.com/docs/app-registration/.
const app_id = 1089; // Replace with your app_id.
const connection = new WebSocket(`wss://ws.binaryws.com/websockets/v3?app_id=${app_id}`);
const api       = new DerivAPIBasic({ connection });

// The api token should be from the same account that the contract is to be purchased for.
// You can get your token here https://app.deriv.com/account/api-token.
const token = '';

const buy_contract_request = {
    "buy": 1,
    "subscribe": 1,
    "price": 10,
    "parameters": { 
        "amount": 10,
        "duration": 1,
        "basis": "stake",
        "symbol": "R_10",
        "currency": "USD",
        "duration_unit": "m",
        "contract_type": "CALL"
    }
}

const buyContractResponse = async (res) => {
    const res_data = JSON.parse(res.data);
    const is_sold = res_data.proposal_open_contract.is_sold;
    
    if (res_data.msg_type === 'buy') {
        console.log(`Contract Id ${res_data.buy.contract_id} \n`);
        console.log(`Details ${res_data.buy.longcode} \n`);
    }

     // If `is_sold` is true it means our contract has finished and we can see if we won or not.
    if (res_data.msg_type === 'proposal_open_contract' && is_sold) {
        const contract_status = res_data.proposal_open_contract.status;
        const contract_profit = res_data.proposal_open_contract.profit;
        console.log(`Profit ${contract_profit} \n`);
        console.log(`Contract ${contract_status} \n`);
        connection.removeEventListener('message', buyContractResponse, false);
        await api.disconnect();
    } else {
        // We can track the status of our contract as updates to the spot price occur.
        let entry_spot = 0; 
        const entry_tick = res_data.proposal_open_contract.entry_tick;
        const current_spot = res_data.proposal_open_contract.current_spot;
        if (typeof (entry_tick) !== 'undefined') entry_spot = entry_tick;
        console.log(`Entry spot ${entry_spot} \n`);
        console.log(`Current spot ${current_spot} \n`);
        console.log(`Difference ${current_spot - entry_spot} \n`);
    }
}

const buyContract = async () => {
    await api.authorize(token);
    await api.send(buy_contract_request);
    connection.addEventListener('message', buyContractResponse);
}

buyContract();

